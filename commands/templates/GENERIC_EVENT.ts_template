import { PlatformContext } from 'jfrog-workers';

type CustomPayload = void;
type CustomResponse = {
    error: string | undefined, // Valued with the cause in case of error
    repositories: Record<string, number>, // A list that contains the number of repositories per repository type
};
type RepoData = {
    "key": string,
    "type": string,
    "description": string,
    "url": string,
    "packageType": string
};

// This worker returns the number of repositories for each repository type.
export default async (context: PlatformContext, data: CustomPayload): Promise<CustomResponse> => {

    const response = {
        error: undefined,
        repositories: {},
    };

    try {
        // Ref: https://jfrog.com/help/r/jfrog-rest-apis/get-repositories
        const res = await context.clients.platformHttp.get('/artifactory/api/repositories');
        if (res.status === 200) {
            const repositories: RepoData[] = res.data;

            // The number of repositories mapped by repository type
            const repoCountRecord: Record<string, number> = {};

            repositories.forEach(repository => {
                let count = repoCountRecord[repository.type] || 0;
                repoCountRecord[repository.type] = ++count;
            });

            response.repositories = repoCountRecord;
            console.log("Repository count success");
        } else {
            response.error = `Request is successful but returned an unexpected status : ${ res.status }`;
            console.warn(response.error);
        }
    } catch(error) {
        response.error = `Request failed with status code ${ error.status || '<none>' } caused by : ${ error.message }`;
        console.error(response.error);
    }

    return response;
}
